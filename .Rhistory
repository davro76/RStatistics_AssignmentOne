setwd("/Users/rodneydavermann/Documents/Fall2021/R_Statistics /Assignments/RStatistics_AssignmentOne")
setwd("/Users/rodneydavermann/Documents/Fall2021/R_Statistics /Assignments/RStatistics_AssignmentOne")
getwd()
# Create the x vector
x <-c(10,20,30,100,150,10,30,50)
# Create the x vector
x <-c(10,20,30,100,150,10,30,50)
x
# Create the x vector
x <-sort(c(10,20,30,100,150,10,30,50), decreasing = FALSE)
x
# Create the x vector
x <-sort(c(10,20,30,100,150,10,30,50), decreasing = FALSE)
x
# using append function to insert 168
a<-append(x,168,3)
a
# using append function to insert 168
x<-append(x,168,3)
x
# We are using the append function to insert 168. This function takes three arguments; the first is the vector, the second is the value that we need to append to the first argument, and the last argument indicates the position where we want to add the second argument.
x<-append(x,168,3)
x
# We are using the append function to insert 168. This function takes three arguments; the first is the vector, the second is the value that we need to append to the first argument, and the last argument indicates the position where we want to add the second argument.
x<-append(x,168)
x
x<-append(x,168)
x
x1<-append(x,168,3)
x1
x
# Create the x vector
x <-sort(c(10,20,30,100,150,10,30,50), decreasing = FALSE)
x
x <-sort(c(10,20,30,100,150,10,30,50), decreasing = FALSE)
x <-append(x,168,3)
x
# We are using the append function to insert 168. This function takes three arguments; the first is
#the vector, the second is the value that we need to append to the first argument, and the last argument
# indicates the position where we want to add the second argument.
x <-sort(c(10,20,30,100,150,10,30,50), decreasing = FALSE)
x <-append(x,168,3)
x
# We are using the append function to insert 168. This function takes three arguments; the first is the vector,
# the second is the value that we need to append to the first argument,
# and the last argument indicates the position where we want to add the second argument.
x <-sort(c(10,20,30,100,150,10,30,50), decreasing = FALSE)
x <-append(x,168,3)
x
x <-c(10,20,30,100,150,10,30,50)
x
x <-c(10,20,30,100,150,10,30,50)
x <-append(x,168,3)
x
# Create x1, x2, and y vectors
x1 <-rnorm(9,5,1)
x1
x1 <-round(rnorm(9,5,1),1)
x1
x2 <-round(rnorm(9,5,1))
x2
x2 <-round(rnorm(9,5,1),1)
x2
x1 <-round(rnorm(9,5,1),1)
x2 <-round(rnorm(9,5,1),1)
x1
x2
y <-rep(c(A,B,C),3)
y <-rep(c("A","B","C"),3)
y
y <-sort(rep(c("A","B","C"),3), decreasing = F)
y
# Create x1, x2, and y vectors
x1 <-round(rnorm(9,5,1),1)
x2 <-round(rnorm(9,5,1),1)
y <-sort(rep(c("A","B","C"),3), decreasing = F)
y
x1
x2
# create the dataframe DFAsg1
DFAsg1 <-data.frame(x,x1,x2,y)
DFAsg1
?apply
# create the dataframe DFAsg1
DFAsg1 <-data.frame(x,x1,x2,y)
DFAsg1
# x vector
x <-c(10,20,30,100,150,10,30,50)
# We are using the append function to insert 168.
x <-append(x,168,3)
x
StandardDeviation <-apply((DFAsg1[x]),MARGIN = 2, FUN = sd())
StandardDeviation <-apply(DFAsg1$x,MARGIN = 2, FUN = sd())
StandardDeviation <-apply(DFAsg1$x,MARGIN = 2, FUN = sd)
# create the dataframe DFAsg1
DFAsg1 <-data.frame(x,x1,x2,y)
DFAsg1
attach(DFAsg1)
StandardDeviation <-apply(x,MARGIN = 2, FUN = sd)
StandardDeviation <-apply(x,MARGIN = 2, sd)
x
DFAsg1$x
apply(DFAsg1$x,2,sum)
StandardDeviation<-apply(DFAsg1[,2,drop=F],2,sum)
StandardDeviation<-apply(DFAsg1[,2,drop=F],2,sum)
StandardDeviation
StandardDeviation<-apply(DFAsg1$x,2,sd)
StandardDeviation<-apply(DFAsg1$x,DFAsg1$y,sd)
StandardDeviation<-tapply(DFAsg1$x,DFAsg1$y,sd)
StandardDeviation
StandardDeviation<-round(tapply(DFAsg1$x,DFAsg1$y,sd),3)
StandardDeviation
# use tapply and round functions to returns the sd of x column with three significative digits.
StandardDeviation<-round(tapply(DFAsg1$x,DFAsg1$y,sd),3)
StandardDeviation
# create the dataframe DFAsg1
DFAsg1 <-data.frame(x,x1,x2,y)
DFAsg1
# Create x1, x2, vectors
x1 <-round(rnorm(9,5,1),1)
x2 <-round(rnorm(9,5,1),1)
# Use sort and rep functions to create y vector
y <-sort(rep(c("A","B","C"),3), decreasing = F)
y
x1
x2
DFAsg1 <-data.frame(x,x1,x2,y)
DFAsg1
StandardDeviation<-round(tapply(DFAsg1$x,DFAsg1$y,sd),3)
StandardDeviation
# use tapply and round functions to returns the sd of x column with three significative digits.
StandardDeviation<-round(tapply(DFAsg1$x,DFAsg1$y,sd),3)
StandardDeviation
# Using apply function
Average_x1_x2<-apply(DFAsg1$x1,DFAsg1$x2, 2,mean)
# Using apply function
Average_x1_x2<-apply(DFAsg1$x1,DFAsg1$x2,mean)
# Using apply function
Average_x1_x2<-apply(c(DFAsg1$x1,DFAsg1$x2),2,mean)
Average_x1_x2<-tapply(c(DFAsg1$x1,DFAsg1$x2),2,mean)
Average_x1_x2<-tapply(c(DFAsg1$x1,DFAsg1$x2),mean)
# Using apply function
Average_x1_x2<-tapply(DFAsg1$x1,DFAsg1$x2,mean)
Average_x1_x2
# Using apply function
Average_x1_x2<-apply(DFAsg1$x1,DFAsg1$x2,mean)
# Using apply function
Average_x1_x2<-mean(DFAsg1$x1,DFAsg1$x2)
# Using apply function
Average_x1_x2<-apply(DFAsg1[,c(-1,-4)],2,mean)
Average_x1_x2
# Using apply function to calculate the mean of x1 and x2, and round the results to three digits.
Average_x1_x2<-round(apply(DFAsg1[,c(-1,-4)],2,mean),3)
Average_x1_x2
# create the dataframe DFAsg1
DFAsg1 <-data.frame(x,x1,x2,y)
DFAsg1
# using subset function to retrieve x2 value where y is B or C
new_x2 <-subset(DFAsg1, select = c(x2,y), subset = (y==B && y==C))
# using subset function to retrieve x2 value where y is B or C
new_x2 <-subset(DFAsg1, select = c(x2,y), subset = (y=="B" && y=="C"))
new_x2
# using subset function to retrieve x2 value where y is B or C
new_x2 <-subset(DFAsg1, select = c(x2,y), subset = (y=="B" or y=="C"))
# using subset function to retrieve x2 value where y is B or C
new_x2 <-subset(DFAsg1, select = c(x2,y), subset = (y=="B" | y=="C"))
new_x2
# using subset function to retrieve x2 value where y is B or C
#new_x2 <-subset(DFAsg1, select = c(x2,y), subset = (y=="B" | y=="C"))
new_x2 <-subset(DFAsg1$x2, select = c(x2,y), subset = (y=="B" | y=="C"))
new_x2
# using subset function to retrieve x2 value where y is B or C
new_x2 <-subset(DFAsg1, select = c(x2,y), subset = (y=="B" | y=="C"))
new_x2
# create Is_x1_greater vector
Is_x1_greater <-DFAsg1$x1 > DFAsg1$x2
Is_x1_greater
# Combine the Is_x1_greater vector with the DFAsg1 dataframe
DFAsg1 <-c(DFAsg1,Is_x1_greater)
DFAsg1
# Use the column combine to add the Is_x1_greater vector to the DFAsg1 dataframe
DFAsg1 <-cbind(DFAsg1,new_col=Is_x1_greater)
DFAsg1
# Use the column combine to add the Is_x1_greater vector to the DFAsg1 dataframe
DFAsg1 <-cbind(DFAsg1,Is_x1_greater)
DFAsg1
# Use the column combine to add the Is_x1_greater vector to the DFAsg1 dataframe
DFAsg1 <-DFAsg1
DFAsg1 <-cbind(DFAsg1,Is_x1_greater)
DFAsg1
# Use the column combine to add the Is_x1_greater vector to the DFAsg1 dataframe
DFAsg1 <-data.frame(DFAsg1,Is_x1_greater)
# Use the column combine to add the Is_x1_greater vector to the DFAsg1 dataframe
DFAsg1 <-data.frame(x,x1,x2,y,Is_x1_greater)
DFAsg1
# Use the column combine to add the Is_x1_greater vector to the DFAsg1 dataframe
#DFAsg1 <-data.frame(x,x1,x2,y,Is_x1_greater)
DFAsg1$Is_x1_greater<-Is_x1_greater
DFAsg1
# Use the column combine to add the Is_x1_greater vector to the DFAsg1 dataframe
#DFAsg1 <-data.frame(x,x1,x2,y,Is_x1_greater)
DFAsg1 <-DFAsg1
DFAsg1$Is_x1_greater<-Is_x1_greater
DFAsg1
# Use the column combine to add the Is_x1_greater vector to the DFAsg1 dataframe
DFAsg1 <-data.frame(DFAsg1,Is_x1_greater)
#DFAsg1$Is_x1_greater<-Is_x1_greater
DFAsg1
# Adding Is_x1_greater to DFAsg1 dataframe
DFAsg1 <-data.frame(DFAsg1,Is_x1_greater)
DFAsg1
DFAsg1
# create the dataframe DFAsg1
DFAsg1 <-data.frame(x,x1,x2,y)
DFAsg1
DFAsg1
# creating the Is_x1_greater vector
Is_x1_greater <-DFAsg1$x1 > DFAsg1$x2
Is_x1_greater
# adding Is_x1_greater vector to DFAsg1 with data.frame function
DFAsg1 <-data.frame(DFAsg1,Is_x1_greater)
DFAsg1
# using duplicated function to retrieve the duplicat data in X
DuplicatX <-DFAsg1$x[duplicated(DFAsg1$x)]
DuplicatX
# using duplicated function to retrieve the duplicat data in X
#DuplicatX <-DFAsg1$x[duplicated(DFAsg1$x)]
DuplicatX<-duplicated(DFAsg1$x)
DuplicatX
# using duplicated function to retrieve the duplicat data in X
#DuplicatX <-DFAsg1$x[duplicated(DFAsg1$x)]
DuplicatX<-duplicated(DFAsg1$x)
DuplicatX
# using duplicated function to retrieve the duplicat data in X
DuplicatX <-DFAsg1$x[duplicated(DFAsg1$x)]
DuplicatX
NumberGreaterThan50 <-length(DFAsg1$x > 50)
NumberGreaterThan50
NumberGreaterThan50 <-DFAsg1$x > 50
NumberGreaterThan50
NumberGreaterThan50 <-length(DFAsg1$x[DFAsg1$x > 50])
NumberGreaterThan50
# using length function and a subset of x column to get the number of x's elements that > 50.
NumberGreaterThan50 <-length(DFAsg1$x[DFAsg1$x > 50])
NumberGreaterThan50
# create vectors a and b
a <-c(1:9)
b <-c(1:4)
a
b
# create sumAB vector by adding a and b vectors
sumAB <-a+b
sumAB
# combine a and b vectors
Combineab <-c(a,b)
Combineab
# combine a and b vectors
Combineab <-c(a,b)
Combineab
Combineab <-sum(Combineab)
# combine a and b vectors
Combineab <-c(a,b)
Combineab
Combineab <-sum(Combineab)
# combine a and b vectors
Combineab <-c(a,b)
Combineab
Combineab <-sum(Combineab)
# combine a and b vectors
Combineab <-sum(c(a,b))
Combineab
